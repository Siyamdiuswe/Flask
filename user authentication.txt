1. To encrypt our password:
python
>>> from flask_bcrypt import Bcrypt
>>> bcrypt = Bcrypt()
bcrypt.generate_password_hash('testing')
b'$2b$12$DuOoaNJ2qGYNEZZcziI7IO3UouDPayl3XBle62QivErmkEdpSgIpK' #b means this is in bytes

If we want string:
>>> bcrypt.generate_password_hash('testing').decode('utf-8')
'$2b$12$xP47BUJeeCGoAhBSefYfEeGPWSp52TVpDJVtje3mBM325B00hwQlC'

To check if our encoded password is equal to our plain text:
hashed_pw = bcrypt.generate_password_hash('testing').decode('utf-8')
>>> bcrypt.check_password_hash(hashed_pw,'password')
False

>>> bcrypt.check_password_hash(hashed_pw,'testing')
True
................................................................
2. import Bcrypt in app(__init__.py)
from flask_bcrypt import Bcrypt
then initiate Bcrypt,
bcrypt = Bcrypt(app)
................................................................
3. Import db and bcrypt in routes.py
from flaskblog import app, db, bcrypt

In registration route, If form.validate_on_submit():
				hashed_password = bcrypt.generate_password_hash(form.password.data).decode('utf-8')
        			user = User(username=form.username.data, email=form.email.data, password=form.password.data)
        			db.session.add(user)
       				db.session.commit()
        			flash('Your account has been created! You can now able to log in', 'success')
................................................................
If same user create account two times it will down our site.So we have to throw
an error when same user wants to make more than one register.

#So we have to raise validationerror:
In forms.py import 
from flaskblog.models import User
from wtforms.validators import ValidationError

    def validate_username(self, username):
        user = User.query.filter_by(username=username.data).first()   
        if user:
            raise ValidationError('That username is taken. Please choose a different one.')


    def validate_email(self, email):
        email = User.query.filter_by(email=email.data).first()   
        if email:
            raise ValidationError('That email is taken. Please choose a different one.')

................................................................

For Login using our database:

In __init__.py file import:
from flask_login import LoginManager
login_manager = LoginManager(app)

Login manager will manage sessions of models certain functionality which we'll create:
So in models.py

from flaskblog import login_manager
from flask_login import UserMixin

In the begining do:
@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

and:

class User(db.Model, UserMixin):

................................................................
Then go to the routes:

Import from flask_login import login_user
then:>>>

@app.route('/login', methods=['GET', 'POST'])
def login():
	form = LoginForm()
	if form.validate_on_submit():
		user = User.query.filter_by(email=form.email.data).first()
		if user and bcrypt.check_password_hash(user.password, form.password.data):
			login_user(user, remember = form.remember.data)
			return redirect(url_for('home'))
		else:
			flash('Login Unsuccessful', 'danger')
	return render_template('login.html', title='Login',form=form)

................................................................

We logged in but it still shows log in in navigation bar.So,

@app.route("/register", methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))


@app.route('/login', methods=['GET', 'POST'])
def login():
	if current_user.is_authenticated:
		return redirect(url_for('home'))
................................................................
To log out:

from flask_login logout_user

@app.route('/logout')
def logout():
	logout_user()
	return redirect(url_for('home'))


TO make them visible in the site, we have to change layout.html

In <!-- Navigation bar --> , <!-- Navbar Right Side -->

	        <div class="navbar-nav">
	          {% if current_user.is_authenticated %}
	          	<a class="nav-item nav-link" href="{{ url_for('logout') }}">Logout</a>
	          {% else %}
	          	<a class="nav-item nav-link" href="{{ url_for('login') }}">Login</a>
	          	<a class="nav-item nav-link" href="{{ url_for('register') }}">Register</a>
	          {% endif %}

................................................................
Create a resticted page:
A route that user can access if they are logged in:

In routes.py:
{% extends "layout.html" %}
{% block content %}
	<h1>This is about page</h1>
{% endblock %}


In account.html:
{% extends "layout.html" %}
{% block content %}
	<h1>{{ current_user.username }}</h1>
{% endblock %}

TO make it visible in navigation 
go to layout.html:

<!-- Navbar Right Side -->
	        <div class="navbar-nav">
	          {% if current_user.is_authenticated %}
	          	<a class="nav-item nav-link" href="{{ url_for('account') }}">Account</a>
	          	<a class="nav-item nav-link" href="{{ url_for('logout') }}">Logout</a>
	          {% else %}
	          	<a class="nav-item nav-link" href="{{ url_for('login') }}">Login</a>
	          	<a class="nav-item nav-link" href="{{ url_for('register') }}">Register</a>
	          {% endif %}
	        </div>
................................................................

but we can stil go to the link(typing manually) account even if we logout.
TO stop this:

from flask_login login_required

@login_required
def account():
	return render_template('account.html', title='Account')

And in __init__.py:

login_manager.login_view = 'login'

To make it(flashed message) look beautiful

login_manager.login_message_category = 'info'

If it flshes to access the link to login 
but after login it redirects to home insted of the secreat link.SO,


................................................................












