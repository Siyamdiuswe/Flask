set FLASK_APP=flaskblog.py

flask run

http://127.0.0.1:5000/
......................................................
To see changes without flask run(just save and reload browser):
set FLASK_DEBUG=1 on cmd
........................................................... 
To run the .py file without env like(set FLASK_APP=flaskblog.py --> flask run):
1.On flaskblog.py on line lines:
 if __name__ == '__main__':
	app.run(debug=True) 
2.On command Lines:
	python flaskblog.py
------------------------------------------------------------------------------
We can use different routes in the module:

@app.route('/')
def hello_world():
    return 'Hello, World!\nI am Siyam'

@app.route('/about')
def about():
    return 'This is about PAGE'

------------------------------------------------------------------------------
To  use template, We can use render_template
and return render_template('home.html')
# it will find home.html in templates folder and render according to that html


------------------------------------------------------------------------------
To pass any post to our template we can use:
	return render_template('home.html', posts = posts)
where post:
posts = [
	{
		'author': 'Sohag Ahammed Siyam',
		'title': 'Blog post 1',
		'content': 'First blog content',
		'date_posted': 'April 20, 2018'
	},
	{
		'author': 'Anis ul Haque',
		'title': 'Blog post 2',
		'content': 'Second blog content',
		'date_posted': 'April 21, 2018'		
	}
]

------------------------------------------------------------------------------

@app.route('/')
def hello_world():
    return render_template('home.html', posts = posts)
We can use any database(Ex. Posts) and render that in out posts
------------------------------------------------------------------------------

To add title: 
return render_template('about.html', title='About')

	{% if title %}
		<title>Flask Blog - {{ title }} </title>
	{% else %}
		<title>Flask Blog</title>
	{% endif %}

------------------------------------------------------------------------------
To access data from database(In hello.py)
<body>
	<h1>This is the home page</h1>
	{% for post in posts %}
		<h1>{{ post.title }} </h1>
		<p>{{ post.author }} {{ post.date_posted }} </p>
		<p>{{ post.content }} </p>
	{% endfor %}
</body>
------------------------------------------------------------------------------
To inherit common design in all routes, make layout.html
<!DOCTYPE html>
<html>
<head>
	{% if title %}
		<title>Flask Blog - {{ title }}</title>
	{% else %}
		<title>Flask Blog</title>
	{% endif %}
	
</head>
<body>
	{% block content %} {% endblock %}
</body>
</html>

------------------------------------------------------------------------------
To use external css in Flask(Url_for):
in flaskblog.py:
from flask import Flask , render_template, url_for

In layout.html
<link rel="stylesheet" type="text/css" href="{{ url_for('static',filename='main.css')}}">

------------------------------------------------------------------------------
To make Registration form with Validation:

Make form.py with:
from flask_wtf import FlaskForm
from wtforms import StringField, PasswordField, SubmitField
from wtforms.validators import DataRequired, Length, Email, EqualTo

class RegistrationForm(FlaskForm):
	username = StringField('Username', validators= [DataRequired(), Length(min=2, max=20)])

	email = StringField('Email', validators=[DataRequired(), Email()])

	password = PasswordField('Password', validators=[DataRequired()])

	confirm_password = PasswordField('Confirm Password', validators=[DataRequired(), EqualTo(password)])

	submit = SubmitField()

class LoginForm(FlaskForm):
	email = StringField('Email', 
		validators=[DataRequired(), Email()])

	password = PasswordField('Password', validators=[DataRequired()])

	remember = BooleanField('Remember Me')
	
	submit = SubmitField() 
------------------------------------------------------------------------------
Import RegistrationForm, LoginForm in main apps(Hello.py):
then make registration route:

@app.route("/register", methods=['GET', 'POST'])
def register():
    form = RegistrationForm()
    if form.validate_on_submit():
        flash(f'Account created for {form.username.data}!', 'success')
        return redirect(url_for('home'))
    return render_template('register.html', title='Register', form=form)


